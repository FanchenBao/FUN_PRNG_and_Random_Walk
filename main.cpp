//============================================================================
// Name        : STA4821_Random_Number.cpp
// Author      : Fanchen
// Date	       : 04/19/2019
// Description : Pseudo-Random Number Generator for uniform, Gaussian, and binary
//				 distribution. The generators are also used to perform a random
//				 walk simulation
//============================================================================


#include "random_number.h"
#include "random_walk.h"
#include "output.h"
#include <random> // for comparison with C++ PRNG

void comparePRNG(int count, uint64_t myseed = std::time(nullptr)){
	// compare distribution of uniform-distributed random number generated by custom algorithm and C++ standard algorithm
	RandomNumber rn(myseed);
	int myDis[10] = {0};
	int cppDis[10] = {0};
	double rv;

	// C++ standard random number generator
	std::random_device rd;  //Will be used to obtain a seed for the random number engine
	std::mt19937 gen(rd()); //Standard mersenne_twister_engine seeded with rd()
	std::uniform_real_distribution<> d(0.0, 1.0);

	for (int i = 0; i < count; i++){
		rv = rn.ranUni();
		myDis[static_cast<int>(rv*10)]++;
		rv = d(gen);
		cppDis[static_cast<int>(rv*10)]++;
	}
	std::cout << "My PRNG distribution from 0.0 to 0.9" << std::endl;
	for (int i = 0; i < 10; i++)
		std::cout << "." << i << "\t";
	std::cout << "\n";
	for (int i = 0; i < 10; i++)
		std::cout << myDis[i] << "\t";
	std::cout << "\n\n";

	std::cout << "C++ PRNG distribution from 0.0 to 0.9" << std::endl;
	for (int i = 0; i < 10; i++)
		std::cout << "." << i << "\t";
	std::cout << "\n";
	for (int i = 0; i < 10; i++)
		std::cout << cppDis[i] << "\t";
	std::cout << "\n";
}


int main() {
//	comparePRNG(10000);
	outputRanUni(20); // output 20 uniform-distributed random numbers
	std::cout << "\n";
	outputRanGau(20); // output 20 Gaussian-distributed random numbers
	std::cout << "\n";
	outputRanBin(20); // output 20 binomial-distributed random numbers
	std::cout << "\n";

	int disMode = 1; // 1 = Gaussian, 0 = uniform
	RandomWalk rw(disMode);
	std::vector<std::vector<double> > coord = rw.walk();
	outputRandomWalk(coord); // output all coordinates of the positions in the random walk

	plotRandomWalk(coord, rw, disMode); // plot random walk



	return 0;
}
